BiocManager::install("GO.db")
install.packages(c("backports", "Matrix"))
install.packages(c("backports", "Matrix"))
install.packages(c("backports", "Matrix"))
install.packages(c("backports", "Matrix"))
pwd()
cget()
library(WGCNA)
##导入数据##
library(WGCNA)
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
getwd()
samples=read.csv('Sam_info.txt',sep = '\t',row.names = 1)
chooseCRANmirror()
chooseCRANmirror()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
update.packages(ask='graphics',checkBuilt=TRUE)
utils:::menuInstallPkgs()
LIBRARY()
library(WGCNA)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db")
library(WGCNA)
BiocManager::install("")
BiocManager::install("impute")
library(WGCNA)
chooseCRANmirror()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GO.db")
install.packages("BiocManager")
BiocManager::install(c("AnnotationDbi", "impute","GO.db", "preprocessCore"))
site="https://mirrors.tuna.tsinghua.edu.cn/CRAN"
install.packages(c("WGCNA", "stringr", "reshape2"), repos=site)
library(WGCNA)
q()
library(WGCNA)
##导入数据##
library(WGCNA)
options(stringsAsFactors = FALSE)
enableWGCNAThreads()
samples=read.csv('Sam_info.txt',sep = '\t',row.names = 1)
samples=read.csv('Test/Sam_info.txt',sep = '\t',row.names = 1)
expro=read.csv('Test/ExpData.txt',sep = '\t',row.names = 1)
dim(expro)
##筛选方差前25%的基因##
m.vars=apply(expro,1,var)
expro.upper=expro[which(m.vars>quantile(m.vars, probs = seq(0, 1, 0.25))[4]),]
dim(expro.upper)
datExpr=as.data.frame(t(expro.upper));
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
##样本聚类检查离群值##
gsg = goodSamplesGenes(datExpr, verbose = 3);
gsg$allOK
sampleTree = hclust(dist(datExpr), method = "average")
plot(sampleTree, main = "Sample clustering to detect outliers"
, sub="", xlab="")
save(datExpr, file = "FPKM-01-dataInput.RData")
##软阈值筛选##
powers = c(c(1:10), seq(from = 12, to=20, by=2))
sft = pickSoftThreshold(datExpr, powerVector = powers, verbose = 5)
par(mfrow = c(1,2));
cex1 = 0.9;
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
abline(h=0.90,col="red")
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
##一步法网络构建：One-step network construction and module detection##
net = blockwiseModules(datExpr, power = 14, maxBlockSize = 6000,
TOMType = "unsigned", minModuleSize = 30,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "AS-green-FPKM-TOM",
verbose = 3)
table(net$colors)
##绘画结果展示##
# open a graphics window
#sizeGrWindow(12, 9)
# Convert labels to colors for plotting
mergedColors = labels2colors(net$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(net$dendrograms[[1]], mergedColors[net$blockGenes[[1]]],
"Module colors",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
##结果保存
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
table(moduleColors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "AS-green-FPKM-02-networkConstruction-auto.RData")
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
rownames(trainDt) = samples[traitRows, 1]
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "AS-green-FPKM-02-networkConstruction-auto.RData")
load("D:/R_workspace/R-demo/AS-green-FPKM-02-networkConstruction-auto.RData")
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "AS-green-FPKM-02-networkConstruction-auto.RData")
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
rownames(trainDt) = samples[traitRows, 1]
moduleLabels = net$colors
moduleColors = labels2colors(net$colors)
table(moduleColors)
MEs = net$MEs;
geneTree = net$dendrograms[[1]];
save(MEs, moduleLabels, moduleColors, geneTree,
file = "AS-green-FPKM-02-networkConstruction-auto.RData")
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
rownames(trainDt) = samples[traitRows, 1]
table(rownames(trainDt) == rownames(datExpr))
##表型与模块相关性##
trainDt= allTraits[Rat, -1]
rownames(trainDt) = samples[traitRows, 1]
table(rownames(trainDt) == rownames(datExpr))
moduleLabelsAutomatic = net$colors
moduleColorsAutomatic = labels2colors(moduleLabelsAutomatic)
moduleColorsWW = moduleColorsAutomatic
MEs0 = moduleEigengenes(datExpr, moduleColorsWW)$eigengenes
MEsWW = orderMEs(MEs0)
modTraitCor = cor(MEsWW, samples, use = "p")
colnames(MEsWW)
modlues=MEsWW
modTraitP = corPvalueStudent(modTraitCor, nSamples)
textMatrix = paste(signif(modTraitCor, 2), "\n(", signif(modTraitP, 1), ")", sep = "")
dim(textMatrix) = dim(modTraitCor)
labeledHeatmap(Matrix = modTraitCor, xLabels = colnames(samples), yLabels = names(MEsWW), cex.lab = 0.5,  yColorWidth=0.01,
xColorWidth = 0.03,
ySymbols = colnames(modlues), colorLabels = FALSE, colors = blueWhiteRed(50),
textMatrix = textMatrix, setStdMargins = FALSE, cex.text = 0.5, zlim = c(-1,1)
, main = paste("Module-trait relationships"))
###导出网络到Cytoscape###
# Recalculate topological overlap if needed
TOM = TOMsimilarityFromExpr(datExpr, power = 14);
# Read in the annotation file
# annot = read.csv(file = "GeneAnnotation.csv");
# Select modules需要修改，选择需要导出的模块颜色
modules = c("lightgreen");
# Select module probes选择模块探测
probes = names(datExpr)
inModule = is.finite(match(moduleColors, modules));
modProbes = probes[inModule];
#modGenes = annot$gene_symbol[match(modProbes, annot$substanceBXH)];
# Select the corresponding Topological Overlap
modTOM = TOM[inModule, inModule];
dimnames(modTOM) = list(modProbes, modProbes)
.libPaths()
.libPaths()
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')
library(ggplot2)
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')
coord_polar(theta = "y", start = 0, direction = 1, clip = "on")
library(vcd)
install.packages("vcd")
library(vcd)
coord_polar(theta = "y", start = 0, direction = 1, clip = "on")
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')+
coord_polar("y", start=0)
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')+
coord_polar("y", start=0)+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')+
coord_polar("y", start=0)
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack')+
coord_polar("y", start=0)+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
ggplot(data=Arthritis, mapping=aes(x="Improved",fill=Improved))+
geom_bar(stat="count",width=0.5,position='stack',size=5)+
coord_polar("y", start=0)+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
blank_theme +
geom_text(stat="count",aes(label = scales::percent(..count../100)), size=4, position=position_stack(vjust = 0.5))
mytable <- with(Arthritis,table(Improved))
df <- as.data.frame(mytable)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
ggplot(data=df, mapping=aes(x="Improved",y=Freq,fill=Improved))+
geom_bar(stat="identity",width=0.5,position='stack',size=5)+
coord_polar("y", start=0)+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
blank_theme +
geom_text(stat="identity",aes(y=Freq, label = scales::percent(Freq/100)), size=4, position=position_stack(vjust = 0.5))
shiny::runApp('Test/alpha')
runApp('Test/alpha')
?
shinyBS
?shinyBS
??shinyBS
?RLumShiny
library(shiny)
library(shinythemes)
library(yarrr)
library(ggplot2)
library(RLumShiny)
library(shinyBS)
library(shinydashboard)
library(DT)
?shinyBS
?shinythemes
runApp('Test/alpha')
?numericInput
runApp('Test/alpha')
pvalue <- function(file_aplha,alpha,file_meta,stat_type){
data_alpha = read.table(file_aplha,header = TRUE,sep = '\t')
col <- colnames(data_alpha)
len <- length(data_alpha)
colnames(data_alpha)[1] <- 'ID'
data_meta = read.csv(file_meta,header = TRUE,sep = '\t')
colnames(data_meta)[1] <- 'ID'
all <- merge(data_alpha,data_meta,by="ID")
y = all[,alpha]
x = all[,len+2-1]
data = data.frame(y,x)
if(stat_type  == "T-test/ANOVA"){
aov1 <- aov(y~x,data)
pv <- summary(aov1)[[1]]["Pr(>F)"][1,1]
fv <- summary(aov1)[[1]]["F value"][1,1]
return(paste0("p-value: ",pv,"; \n[ANOVA] F-value: ",fv))
}else{
return(paste0("[Kruskal-Wallis] p-value: ",kpvalue =kruskal.test(y~x, data)[3]))
}
}
pirates <- function(file_aplha,alpha,file_meta,pal,theme,inf.method){
data_alpha = read.table(file_aplha,header = TRUE,sep="\t",)
col <- colnames(data_alpha)
len <- length(data_alpha)
colnames(data_alpha)[1] <- 'ID'
data_meta = read.table(file_meta,header = TRUE,sep="\t",)
colnames(data_meta)[1] <- 'ID'
all <- merge(data_alpha,data_meta,by="ID")
y = all[,alpha]
x = all[,len+2-1]
data = data.frame(y,x)
langu = y ~ x
main <- colnames(data_alpha)[alpha]
pirateplot(formula =langu ,data = data,main = main,pal=pal,theme = as.numeric(theme),inf.method = inf.method)
}
box <- function(file_aplha,alpha,file_meta){#,main,notch,color,horizontal){
alpha_div = read.table(file_aplha, header=T, row.names=1, sep="\t", comment.char="")
metadata = read.table(file_meta, header=T, row.names=1, sep="\t", comment.char="", stringsAsFactors = F)
alpha_boxplot(alpha_div=alpha_div,metadata=metadata, index = colnames(alpha_div)[alpha],groupID = colnames(metadata))
}
runApp('Test/alpha')
runApp('Test/alpha')
?shinyBS
??shinyBS
runApp('Test/alpha')
runApp('Test/alpha')
return(paste0("[Kruskal-Wallis] p-value: ",kpvalue =kruskal.test(y~x, data)[3]))
runApp('Test/alpha')
runApp('Test/alpha')
runApp('Test/alpha')
runApp('Test/alpha')
runApp('Test/alpha')
?kruskal.test
require(graphics)
boxplot(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)[3]
typeof(kruskal.test(Ozone ~ Month, data = airquality)[3])
typeof(kruskal.test(Ozone ~ Month, data = airquality)[3][2])
kruskal.test(Ozone ~ Month, data = airquality)[3]
kruskal.test(Ozone ~ Month, data = airquality)[3][1]
kruskal.test(Ozone ~ Month, data = airquality)[3][1][1]
kruskal.test(Ozone ~ Month, data = airquality)[3]
kruskal.test(Ozone ~ Month, data = airquality)[3][$p.value]
kruskal.test(Ozone ~ Month, data = airquality)[3][p.value]
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)[3][p.value]
kruskal.test(Ozone ~ Month, data = airquality)[3]
paste0(kruskal.test(Ozone ~ Month, data = airquality)[3])
paste0(round(kruskal.test(Ozone ~ Month, data = airquality)[3]),3)
runApp('Test/alpha')
runApp('Test/alpha')
shiny::runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
?reactive
runApp('Test/3dmol')
runApp('Test/3dmol')
r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10, # 图形质量
lowerZoomLimit = 50, # 缩放下限
upperZoomLimit = 350 # 缩放上限
)
# backgroundColor = "black",
# lowerZoomLimit = 1,
# upperZoomLimit = 350
) %>%
m_add_model(data = pdb_6zsl, format = "pdb") %>%
m_zoom_to() %>%m_set_style(
style = m_style_cartoon(
color = "#70CBFF",style = "rectangle", thickness = 0.4,)
)
runApp('Test/3dmol')
install.packages("see")
shiny::runApp('Test/alpha')
shiny::runApp('Test/alpha')
radioinput
?radioinput
?selectInput
?shiny
?selectInput
?conditionalPanel
runApp('Test/alpha')
？ape
?
ape
??ape
?ape
shiny::runApp('Test/beta')
runApp('Test/beta')
runApp('Test/alpha')
runApp('Test/alpha')
runApp('Test/beta')
# head(res$value)
# head(res$vectors)
# biplot(res)#可视化PCOA 的结果
# anosim(x, grouping, permutations = 999, distance = "bray", strata = NULL, parallel = getOption("mc.cores"))
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
# summary(d1.ano)
plot(d1.ano)
runApp('Test/beta')
runApp('Test/beta')
runApp('Test/beta')
runApp('Test/alpha')
runApp('Test/beta')
runApp('Test/alpha')
runApp('Test/beta')
runApp('Test/alpha')
runApp('Test/beta')
runApp('Test/beta')
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
setwd("D:/R_workspace/R-demo/Test/alpha")
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
setwd("D:/R_workspace/R-demo/Test/beta")
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
di
d
的
d1
d2
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
plot(d1.ano)
res=pcoa(d1.dist,correction="none")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
res=pcoa(d1.dist,correction="none")
res
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
anosim(d1.dist, d1[,1])
d1.dist
d1[,1]
d1.dist
head(d1)
d1 <- read.table("./WWW/beta.txt",header = TRUE,sep = "\t")
d1
d1 <- read.table("./WWW/beta.txt",sep = "\t")
head(h1)
head(d1)
d1.dist <- vegdist(d1)#构造距离矩阵。
d1 <- read.table("./WWW/beta.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
runApp()
?anosim
res=pcoa(d1.dist,correction="none")
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
d2 <- read.table(pdata.env,header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
anosim(d1.dist, d1[,1])
d1.list
d1.dist
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
anosim(d1.dist, d1[,1])
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
table(d1)
table(d2)
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
table(d1)
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d1.dist <- vegdist(d1)#构造距离矩阵。
table(d1)
View(d1)
?row.names
read.csv("./www/pcoa2_1.csv")
head(read.csv("./www/pcoa2_1.csv"))
head(read.csv("./www/pcoa2_1.csv",row.names = 1))
head(read.csv("pcoa2_2.csv",row.names = 1))
head(read.csv("./www/pcoa2_1.csv",row.names = 1))
head(read.csv("pcoa2_2.csv",row.names = 1))
head(read.csv("./www/pcoa2_2.csv",row.names = 1))
d1 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
d2 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
# table(d1)
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
d1 = read.csv("./www/pcoa2_1.csv",row.names = 1)
d2 = read.csv("./www/pcoa2_2.csv",row.names = 1)
# table(d1)
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
View(d1.ano)
View(d2)
View(d2)
d3 <- read.table("./www/beta.txt",header = TRUE,sep = "\t")
View(d3)
d4 <- read.table("./www/metadata.txt",header = TRUE,sep = "\t")
View(d4)
d4 <- read.table("./www/metadata.txt",header = TRUE,row.names = 1,sep = "\t")
d1 <- read.table("./www/beta.txt",header = TRUE,row.names = 1,sep = "\t")
# d1 = read.csv("./www/pcoa2_1.csv",row.names = 1)
# d2 = read.csv("./www/pcoa2_2.csv",row.names = 1)
d2 <- read.table("./www/metadata.txt",header = TRUE,row.names = 1,sep = "\t")
# table(d1)
d1.dist <- vegdist(d1)#构造距离矩阵。
res=pcoa(d1.dist,correction="none")
d1.ano <- with(d2, anosim(d1.dist, d1[,1]))#相似性分析，Goup是指输入pdata.env中的分组信息列
d1 <- read.table(pdata,header = TRUE,sep = "\t",row.names = 1)
# d1 <- read.table("./www/beta.txt",header = TRUE,row.names = 1,sep = "\t")
# d1 = read.csv("./www/pcoa2_1.csv",row.names = 1)
# d2 = read.csv("./www/pcoa2_2.csv",row.names = 1)
# d2 <- read.table("./www/metadata.txt",header = TRUE,row.names = 1,sep = "\t")
d2 <- read.table(pdata.env,header = TRUE,sep = "\t",row.names = 1)
runApp()
runApp()
runApp()
read
runApp()
library(ggbiplot)
runApp()
runApp('D:/R_workspace/R-demo/Test/pca')
runApp('D:/R_workspace/R-demo/Test/alpha')
runApp()
