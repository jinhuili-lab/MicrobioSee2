runApp('Test/alpha')
runApp('Test/alpha')
runApp('Test/alpha')
?kruskal.test
require(graphics)
boxplot(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)[3]
typeof(kruskal.test(Ozone ~ Month, data = airquality)[3])
typeof(kruskal.test(Ozone ~ Month, data = airquality)[3][2])
kruskal.test(Ozone ~ Month, data = airquality)[3]
kruskal.test(Ozone ~ Month, data = airquality)[3][1]
kruskal.test(Ozone ~ Month, data = airquality)[3][1][1]
kruskal.test(Ozone ~ Month, data = airquality)[3]
kruskal.test(Ozone ~ Month, data = airquality)[3][$p.value]
kruskal.test(Ozone ~ Month, data = airquality)[3][p.value]
kruskal.test(Ozone ~ Month, data = airquality)
kruskal.test(Ozone ~ Month, data = airquality)[3][p.value]
kruskal.test(Ozone ~ Month, data = airquality)[3]
paste0(kruskal.test(Ozone ~ Month, data = airquality)[3])
paste0(round(kruskal.test(Ozone ~ Month, data = airquality)[3]),3)
runApp('Test/alpha')
runApp('Test/alpha')
shiny::runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
?reactive
runApp('Test/3dmol')
runApp('Test/3dmol')
r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10, # 图形质量
lowerZoomLimit = 50, # 缩放下限
upperZoomLimit = 350 # 缩放上限
)
# backgroundColor = "black",
# lowerZoomLimit = 1,
# upperZoomLimit = 350
) %>%
m_add_model(data = pdb_6zsl, format = "pdb") %>%
m_zoom_to() %>%m_set_style(
style = m_style_cartoon(
color = "#70CBFF",style = "rectangle", thickness = 0.4,)
)
runApp('Test/3dmol')
install.packages("see")
shiny::runApp('Test/alpha')
shiny::runApp('Test/alpha')
radioinput
?radioinput
?selectInput
?shiny
?selectInput
?conditionalPanel
runApp('Test/alpha')
shiny::runApp('Test/heatmap')
runApp('Test/heatmap')
runApp('Test/heatmap')
runApp('Test/heatmap')
shiny::runApp('Test/final/heatmap')
runApp('Test/final/heatmap')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/final/alpha')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
if (inputmodel=="1"){
data1<-read.csv(filedata)
r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10, # 图形质量
lowerZoomLimit = 50, # 缩放下限
upperZoomLimit = 350 # 缩放上限
)
) %>%
m_add_model(data = data1, format = as.character(dataformat),keepH = keepHchoice) %>%
m_zoom_to() %>%m_set_style(
style = m_style_cartoon(
color = colorchoice,style = as.character(stylechoice), thickness = 0.4))%>%
m_spin()
}else if(inputmodel=="pdbid"){
r3dmol(
viewer_spec = m_viewer_spec(
cartoonQuality = 10, # 图形质量
lowerZoomLimit = 50, # 缩放下限
upperZoomLimit = 350 # 缩放上限
)
) %>%
m_add_model(m_fetch_pdb(pdbidnm), keepH = keepHchoice) %>%
m_set_style(m_style_sphere()) %>%
m_zoom_to() %>%
m_spin()
}
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
?r3dmol
r3dmol(
backgroundColor = "black",
lowerZoomLimit = 1,
upperZoomLimit = 350
) %>%
m_add_model(data = pdb_6zsl, format = "pdb") %>%
m_zoom_to()
a = r3dmol(
backgroundColor = "black",
lowerZoomLimit = 1,
upperZoomLimit = 350
) %>%
m_add_model(data = pdb_6zsl, format = "pdb") %>%
m_zoom_to()
a
typeof(a)
?ggplot2
?vegam
?vegan
??vegan
ggplot(3)
library(ggplot2)
?ggplot
ggplot() +
geom_point(data = df, aes(gp, y)) +
geom_point(data = ds, aes(gp, mean), colour = 'red', size = 3) +
geom_errorbar(
data = ds,
aes(gp, mean, ymin = mean - sd, ymax = mean + sd),
colour = 'red',
width = 0.4
)
df <- data.frame(
gp = factor(rep(letters[1:3], each = 10)),
y = rnorm(30)
)
ds <- do.call(rbind, lapply(split(df, df$gp), function(d) {
data.frame(mean = mean(d$y), sd = sd(d$y), gp = d$gp)
}))
# The summary data frame ds is used to plot larger red points on top
# of the raw data. Note that we don't need to supply `data` or `mapping`
# in each layer because the defaults from ggplot() are used.
ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
b=ggplot(df, aes(gp, y)) +
geom_point() +
geom_point(data = ds, aes(y = mean), colour = 'red', size = 3)
typeof(b)
b
?r3dmol
?r3dmolOutput
runApp('Test/3dmol')
runApp('Test/3dmol')
runApp('Test/3dmol')
shiny::runApp('Test/final/beta')
runApp('Test/final/beta')
runApp('Test/final/beta')
shiny::runApp('Test/final/venn')
runApp('Test/final/venn')
runApp('Test/final/venn')
runApp('Test/final/venn')
runApp('Test/final/pie')
runApp('Test/final/pie')
runApp('Test/final/pie')
runApp('Test/final/pie')
source("D:/R_workspace/R-demo/Test/final/3dmol/plot.R", encoding = 'UTF-8')
runApp('Test/final/3dmol')
?knitr
?geom_violin
??geom_violin
shiny::runApp('Test/final/alpha')
geom_quantile() for continuous x, geom_violin() for a richer display of the distribution, and geom_jitter() for a useful technique for small data.
Examples
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot()
# Orientation follows the discrete axis
ggplot(mpg, aes(hwy, class)) + geom_boxplot()
p + geom_boxplot(notch = TRUE)
p
p + geom_boxplot(varwidth = TRUE)
p + geom_boxplot(fill = "white", colour = "#3366FF")
# By default, outlier points match the colour of the box. Use
# outlier.colour to override
p + geom_boxplot(outlier.colour = "red", outlier.shape = 1)
# Remove outliers when overlaying boxplot with original data points
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
# Boxplots are automatically dodged when any aesthetic is a factor
p + geom_boxplot(aes(colour = drv))
ggplot(diamonds, aes(carat, price)) +
geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
geom_boxplot(aes(group = cut_width(carat, 0.25)))
# Adjust the transparency of outliers using outlier.alpha
ggplot(diamonds, aes(carat, price)) +
geom_boxplot(aes(group = cut_width(carat, 0.25)), outlier.alpha = 0.1)
y <- rnorm(100)
df <- data.frame(
x = 1,
y0 = min(y),
y25 = quantile(y, 0.25),
y50 = median(y),
y75 = quantile(y, 0.75),
y100 = max(y)
)
ggplot(df, aes(x)) +
geom_boxplot(
aes(ymin = y0, lower = y25, middle = y50, upper = y75, ymax = y100),
stat = "identity"
)
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_violin()
# Orientation follows the discrete axis
ggplot(mtcars, aes(mpg, factor(cyl))) +
geom_violin()
p + geom_violin() + geom_jitter(height = 0, width = 0.1)
# Scale maximum width proportional to sample size:
p + geom_violin(scale = "count")
p + geom_violin(scale = "width")
# Default is to trim violins to the range of the data. To disable:
p + geom_violin(trim = FALSE)
# Use a smaller bandwidth for closer density fit (default is 1).
p + geom_violin(adjust = .5)
# Add aesthetic mappings
# Note that violins are automatically dodged when any aesthetic is
# a factor
p + geom_violin(aes(fill = cyl))
p + geom_violin(aes(fill = factor(cyl)))
p + geom_violin(aes(fill = factor(vs)))
p + geom_violin(aes(fill = factor(am)))
p + geom_violin(fill = "grey80", colour = "#3366FF")
# Show quartiles
p + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75))
# Scales vs. coordinate transforms -------
if (require("ggplot2movies")) {
# Scale transformations occur before the density statistics are computed.
# Coordinate transformations occur afterwards.  Observe the effect on the
# number of outliers.
m <- ggplot(movies, aes(y = votes, x = rating, group = cut_width(rating, 0.5)))
m + geom_violin()
m +
geom_violin() +
scale_y_log10()
m +
geom_violin() +
coord_trans(y = "log10")
m +
geom_violin() +
scale_y_log10() + coord_trans(y = "log10")
# Violin plots with continuous x:
# Use the group aesthetic to group observations in violins
ggplot(movies, aes(year, budget)) +
geom_violin()
ggplot(movies, aes(year, budget)) +
geom_violin(aes(group = cut_width(year, 10)), scale = "width")
}
m +
geom_violin() +
coord_trans(y = "log10")
m +
geom_violin() +
scale_y_log10() + coord_trans(y = "log10")
# Violin plots with continuous x:
# Use the group aesthetic to group observations in violins
ggplot(movies, aes(year, budget)) +
geom_violin()
ggplot(movies, aes(year, budget)) +
geom_violin(aes(group = cut_width(year, 10)), scale = "width")
}
m +
geom_violin() +
coord_trans(y = "log10")
m +
geom_violin() +
scale_y_log10() + coord_trans(y = "log10")
# Violin plots with continuous x:
# Use the group aesthetic to group observations in violins
ggplot(movies, aes(year, budget)) +
geom_violin()
ggplot(movies, aes(year, budget)) +
geom_violin(aes(group = cut_width(year, 10)), scale = "width")
}
m +
geom_violin() +
scale_y_log10() + coord_trans(y = "log10")
runApp('Test/final/alpha')
ggplot(data, aes(x,y))+
geom_violin(aes(fill=x)) +
labs(
x=xlabel,
y=ylabel)
runApp('Test/final/alpha')
runApp('Test/final/alpha')
runApp('Test/final/beta')
runApp('Test/final/beta')
runApp('Test/final/stack')
runApp('Test/final/stack')
runApp('Test/final/stack')
runApp('Test/final/stack')
runApp('Test/final/beta')
runApp('Test/final/stack')
runApp('Test/final/stack')
runApp('Test/final/beta')
?ggbiplot
??ggbiplot
setwd("D:/R_workspace/R-demo/Test/final")
setwd("D:/R_workspace/R-demo/Test/final/histogram")
data<-read.table('./www/histogram_chart.txt',sep = "\t",header = TRUE)
len<-length(data[,2])
charat<-unique(data[,2])###遍历出type中的不同类型
a<-NULL
for (i in 1:len){
for(j in 1:length(charat)){
if (data[,2][i]==charat[j]){
a[i]<-j
}
}
}
data<-data.frame(data,a)
legend='   '
tlegend='   '
word=paste0('p=ggplot(data=data, aes(x=reorder(reorder(data$',colnames(data)[1],',data$',colnames(data)[3],'),data$',colnames(data)[4],'), y=',colnames(data)[3],',fill=',colnames(data)[2],'))')
eval(parse(text=word))
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text(aes(label=colnames(data)[3], y=colnames(data)[3]+0.05), position=position_dodge(0.9), vjust=0)
word=paste0('p=ggplot(data=data, aes(x=reorder(reorder(data$',colnames(data)[1],',data$',colnames(data)[3],'),data$',colnames(data)[4],'), y=',colnames(data)[3],',fill=',colnames(data)[2],'))')
eval(parse(text=word))
library(ggplot2)
a<-NULL
for (i in 1:len){
for(j in 1:length(charat)){
if (data[,2][i]==charat[j]){
a[i]<-j
}
}
}
data<-data.frame(data,a)
legend='   '
tlegend='   '
word=paste0('p=ggplot(data=data, aes(x=reorder(reorder(data$',colnames(data)[1],',data$',colnames(data)[3],'),data$',colnames(data)[4],'), y=',colnames(data)[3],',fill=',colnames(data)[2],'))')
eval(parse(text=word))
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text(aes(label=colnames(data)[3], y=colnames(data)[3]+0.05), position=position_dodge(0.9), vjust=0)
p
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text(aes(label=as.numeric(colnames(data)[3]), y=as.numeric(colnames(data)[3])+0.05), position=position_dodge(0.9), vjust=0)
# 横坐标文字旋转九十度
p
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text(aes(label=as.numeric(colnames(data)[3]), y=as.numeric(colnames(data)[3])+0.05), position=position_dodge(0.9), vjust=0)
# 横坐标文字旋转九十度
p
word=paste0('p=ggplot(data=data, aes(x=reorder(reorder(data$',colnames(data)[1],',data$',colnames(data)[3],'),data$',colnames(data)[4],'), y=',colnames(data)[3],',fill=',colnames(data)[2],'))')
eval(parse(text=word))
p
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text( y=as.numeric(colnames(data)[3])+0.05, position=position_dodge(0.9), vjust=0)
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)
word=paste0('p=ggplot(data=data, aes(x=reorder(reorder(data$',colnames(data)[1],',data$',colnames(data)[3],'),data$',colnames(data)[4],'), y=',colnames(data)[3],',fill=',colnames(data)[2],'))')
eval(parse(text=word))
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x =   element_text(angle=90,hjust = 1)
)+
geom_text( position=position_dodge(0.9), vjust=0)
?geom_text
p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x = element_text(angle=90,hjust = 1)
)+
geom_text(label=colnames(data)[3], y=as.numeric(colnames(data)[3])+0.05, position=position_dodge(0.9)
)
p=p+
geom_bar(stat="identity", width=0.8,) +
coord_flip()+ ###决定是否翻转
# scale_fill_manual(values = CPCOLS) +
# scale_fill_manual() +
theme_bw() +
# scale_x_discrete(labels=labels) +
xlab(legend) +
theme(axis.text=element_text(face = "bold", color="gray50")) +
labs(title = tlegend)+
theme(axis.text.x = element_text(angle=90,hjust = 1)
)
p
p+geom_text()
shiny::runApp()
runApp('D:/R_workspace/R-demo/Test/final/3dmol')
runApp('D:/R_workspace/R-demo/Test/final/3dmol')
