library(readr)
install.packages("readr")
pkgs <- c(
"assertthat",
"backports", "base64enc", "BH", "bindr", "bindrcpp", "bookdown", "broom",
"callr", "car", "cellranger", "cli", "clipr", "clorspace",
"cowplot", "crayon", "curl",
"DBI", "dbplyr", "dichromat", "digest", "dplyr",
"evaluate",
"forcats",
"ggplot2", "ggrepel", "glue", "gtable",
"haven", "highr", "hms", "htmltools", "httr",
"jsonlite",
"knitr",
"labeling", "lazyeval", "lubridate",
"magrittr", "markdown", "microbenchmark", "mime", "mnormt", "modelr", "munsell",
"NHANES",
"openssl",
"pillar", "pkgconfig", "plogr", "plyr", "psych", "purr",
"R6", "RColorBrewer", "Rcpp", "readr", "readxl",
"rematch", "reprex", "reshape2", "rlang", "rmarkdown",
"rprojroot", "rstudioapi", "rvest",
"scales", "selectr", "socviz", "stringi", "stringr",
"tibble", "tidyr", "tidyselect", "tidyverse",
"utf8",
"viridisLite",
"whisker",
"xml2", "xtable",
"yaml"
)
install.packages(unique(pkgs))
reticulate::repl_python()
from dna_features_viewer import GraphicFeature, GraphicRecord
features=[
GraphicFeature(start=0, end=20, strand=+1, color="#ffd700",
label="Small feature"),
GraphicFeature(start=20, end=500, strand=+1, color="#ffcccc",
label="Gene 1 with a very long name"),
GraphicFeature(start=400, end=700, strand=-1, color="#cffccc",
label="Gene 2"),
GraphicFeature(start=600, end=900, strand=+1, color="#ccccff",
label="Gene 3")
]
record = GraphicRecord(sequence_length=1000, features=features)
record.plot(figure_width=5)
---
title: "Assignment Bioinfor2"
knit_with_parameters("C:/Users/Jinhui Li/Desktop/assignment bioinfor.Rmd")
knit_with_parameters("C:/Users/Jinhui Li/Desktop/assignmentbioinfor.Rmd")
knit_with_parameters("C:/Users/Jinhui Li/Desktop/assignmentbioinfor.Rmd")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "win.binary")
install.packages("DT", version="2.0")
install.packages("DT", version="2.0")
install.packages("DT", version="0.2.0")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "win.binary")
Sys.which("make")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
library(DT)
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
library(DT)
library(DT)
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
library(DT)
install.packages("C:/Users/Jinhui Li/Downloads/DT-0.20.zip", repos = NULL, type = "source")
library(DT)
install.packages("DT", version="0.2.0")
library(DT)
shiny::runApp('D:/GoogleDrive/07.else/MicrobioSee2/Microbioseee2/MicroBioSee2/app/box')
install.packages("BayesFactor", version="0.9.12-4.2")
library(BayesFactor
)
library(BayesFactor)
library(BayesFactor
)
install.packages("BayesFactor", version="0.9.12-4.2")
install.packages("BayesFactor", version="0.9.12")
install.packages("BayesFactor", version="0.9.11")
install.packages("BayesFactor", version="0.9.12-2")
install.packages("BayesFactor", version="0.9.12-2")
install.packages("BayesFactor", version="0.9.12-1")
install.packages("BayesFactor", version="0.9.12-4.2")
library(BayesFactor)
install.packages("C:/Users/Jinhui Li/Downloads/BayesFactor_0.9.12-4.2.tar.gz", repos = NULL, type = "source")
install.packages("MatrixModels")
install.packages("Matrix", version="1.3-2")
install.packages("MatrixModels")
install.packages("MatrixModels",version="0.5-0")
install.packages("C:/Users/Jinhui Li/Downloads/MatrixModels_0.5-0.tar.gz", repos = NULL, type = "source")
install.packages("BayesFactor", version="0.9.12-4.2")
library(RLumShiny)
remove.packages("RLumShiny")
install.packages("RLumShiny",version="0.2.2")
install.packages("RLumShiny", version = "0.2.2")
install.packages("C:/Users/Jinhui Li/Downloads/RLumShiny_0.2.2.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Jinhui Li/Downloads/Luminescence_0.9.15.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Jinhui Li/Downloads/RLumShiny_0.2.2.tar.gz", repos = NULL, type = "source")
library(shiny); runApp('D:/GoogleDrive/07.else/MicrobioSee2/Microbioseee2/08PM/MicroBioSee2-0504 08PM/MicroBioSee2/main/app2.R')
file.path(R.home("bin"), "R.exe")
cmd <- sprintf('"%s" --vanilla --slave -e "shiny::runApp(\'%s\')"', r_path, normalizePath("app2.R"))
cmd <- sprintf('"%s" --vanilla --slave -e "shiny::runApp(\'%s\')"', r_path, normalizePath("app.R"))
r_path <- file.path(R.home("bin"), "R.exe")
cmd <- sprintf('"%s" --vanilla --slave -e "shiny::runApp(\'%s\')"', r_path, normalizePath("app.R"))
cmd <- sprintf('"%s" --vanilla --slave -e "shiny::runApp(\'%s\')"', r_path, normalizePath("app.R"))
cmd
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
dirname(rstudioapi::getActiveDocumentContext()$path)
rstudioapi::getActiveDocumentContext()$path
message('library paths:\n', paste('... ', .libPaths(), sep='', collapse='\n'))
Sys.getenv("R_Script")
args <- commandArgs(trailingOnly = TRUE)
script_path <- args[1]
print(script_path)
argss
args
library(ggplot2)
setwd("D:/GoogleDrive/07.else/MicrobioSee2/Microbioseee2/08PM/MicroBioSee2-0504 08PM/MicroBioSee2/app/alpha")
args
